x <- randn(100)
?randn
?randn()
?rnorn()
?rnorm()
library(ggplot2)
install.packages(c("ggplot", "reshape", "plyr"))
install.packages(c("ggplot2", "reshape", "plyr"))
install.packages(c("ggplot2"))
install.packages('ggplot')
install.packages('ggplot2')
setwd('/Users/pascaltimshel/git/snpsnap/analysis/collection_production_v1')
#file.collection = '/Users/pascaltimshel/snpsnap/data/step3/1KG_snpsnap_production_v1/ld0.5/ld0.5_collection.tab_head100'
file.collection = '/Users/pascaltimshel/snpsnap/data/step3/1KG_snpsnap_production_v1/ld0.5/ld0.5_collection.tab'
rm(list=ls())
library(ggplot2)
library(reshape2)
library(plyr)
# loading multiplot function
source('../multiplot.R')
setwd('/Users/pascaltimshel/git/snpsnap/analysis/collection_production_v1')
#file.collection = '/Users/pascaltimshel/snpsnap/data/step3/1KG_snpsnap_production_v1/ld0.5/ld0.5_collection.tab_head100'
file.collection = '/Users/pascaltimshel/snpsnap/data/step3/1KG_snpsnap_production_v1/ld0.5/ld0.5_collection.tab'
df.collection <- read.delim(pipe(paste("cut -f2,3,4,17", file.collection))) # paste has sep=" " by default
p <- ggplot(df.collection, aes(x=dist_nearest_gene_snpsnap))
p <- p + geom_histogram()
p <- p + labs(x='Distance to Nearest Gene', y='Count')
p
?hist
rm(list=ls())
library(ggplot2)
library(reshape2)
library(plyr)
# loading multiplot function
source('../multiplot.R')
setwd('/Users/pascaltimshel/git/snpsnap/analysis/collection_production_v1')
#file.collection = '/Users/pascaltimshel/snpsnap/data/step3/1KG_snpsnap_production_v1/ld0.5/ld0.5_collection.tab_head100'
file.collection = '/Users/pascaltimshel/snpsnap/data/step3/1KG_snpsnap_production_v1/ld0.5/ld0.5_collection.tab'
df.collection <- read.delim(pipe(paste("cut -f2,3,4,17", file.collection))) # paste has sep=" " by default
5371433/30
5371433/1000
5371433/10000
?density
5371433
df.collection['dist_nearest_gene_snpsnap']
head(df.collection['dist_nearest_gene_snpsnap'])
class(df.collection['dist_nearest_gene_snpsnap'])
class(df.collection[,'dist_nearest_gene_snpsnap'])
hist.dist_nearest_gene_snpsnap <- hist(df.collection[,'dist_nearest_gene_snpsnap'], breaks=10000, plot=F)
hist.dist_nearest_gene_snpsnap <- hist(df.collection[,'dist_nearest_gene_snpsnap'], breaks=10000, plot=T)
hist.dist_nearest_gene_snpsnap <- hist(df.collection[,'dist_nearest_gene_snpsnap'], breaks=1000, plot=T)
hist.dist_nearest_gene_snpsnap <- hist(df.collection[,'dist_nearest_gene_snpsnap'], breaks=100, plot=T)
5371433/100
p <- ggplot(df.collection, aes(x=dist_nearest_gene_snpsnap))
p <- p + geom_histogram(binwidth=55000)
p <- p + labs(x='Distance to Nearest Gene', y='Count')
p
plots[["dist_nearest_gene_snpsnap"]] <- p
plots <- list()  # new empty list
### FREQ
p <- ggplot(df.collection, aes(x=freq_bin))
p <- p + geom_histogram(binwidth=1)
p <- p + labs(x='Minor Allele Frequency', y='Count')
p
plots[["freq"]] <- p
p <- ggplot(df.collection, aes(x=gene_count))
p <- p + geom_histogram(binwidth=3) # range=174
p <- p + labs(x='Gene Density', y='Count')
p
plots[["gene_count"]] <- p
p <- ggplot(df.collection, aes(x=gene_count))
p <- p + geom_histogram(binwidth=1) # range=174
p <- p + labs(x='Gene Density', y='Count')
p
plots[["gene_count"]] <- p
### GENE DIST - OBS: be careful about the binwidth
p <- ggplot(df.collection, aes(x=dist_nearest_gene_snpsnap))
p <- p + geom_histogram(binwidth=55000) # range=5371433
p <- p + labs(x='Distance to Nearest Gene', y='Count')
p
plots[["dist_nearest_gene_snpsnap"]] <- p
p <- ggplot(df.collection, aes(x=friends_ld05))
p <- p + geom_histogram(binwidth=10) #range=3646
p <- p + labs(x='LD buddies (using cut-off ld0.5)', y='Count')
p
plots[["friends_ld05"]] <- p
p <- p + labs(x='LD buddies', y='Count')
p
p <- ggplot(df.collection, aes(x=friends_ld05))
p <- p + geom_histogram(binwidth=10) #range=3646
p <- p + labs(x='LD buddies', y='Count')
p
plots[["friends_ld05"]] <- p
multiplot(plotlist = plots)
multiplot(plotlist = plots, cols=2)
wd <- '/Users/pascaltimshel/git/snpsnap/analysis/gwascatalog_production_v1'
setwd(wd)
header_str = "gwas;rating_insufficient;pct_insufficient;N_insufficient;N_input_snps;rating_size;pct_size;median_size;N_sample_sets"
header_cols = unlist(strsplit(header_str, split=';')) #head_cols = unlist(str_split(header_str, perl(';')))
## Read into a list of files:
path.datafiles <- wd
pat = "subprocess_gwastable.*\\.tab$"
files <- list.files(path = path.datafiles, pattern = pat, full.names = TRUE) #full path
params <- str_match(files, 'subprocess_gwastable.(.*).tab')[,2] # perl does not work
names(files) <- params
cat(names(files), sep="\n")
list_of_data <- llply(files, read.delim, col.names=header_cols, stringsAsFactors=FALSE)#row.names = 1 --> NO!
x <- list_of_data[['10000.5.50.50.50']]
add_col <- function(dfname, dflist){
df <- dflist[[dfname]]
df["param"] <- factor(dfname)
return (df)
}
dflist <- lapply(names(list_of_data), add_col, list_of_data) #adding column
names(dflist) <- names(list_of_data) #copy names
#x <- dflist[[1]]
df <- ldply(dflist) # merging
tmp <- df[df[,'gwas']=='Age-related_macular_degeneration',]
tmp1 <- df[df[,'gwas']=='Alzheimers_disease',]
############### MAKING DATA FRAMEs
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient'))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_size'))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient','pct_size'))
################### BOX PLOT
#str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=variable)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
######################## TEXT PLOT for specific data frame
dfwork <- dflist[['10000.5.50.50.50']]
p <- ggplot(dfwork, aes(x=1, y=pct_insufficient, label=rating_insufficient)) + geom_text()# + geom_jitter()
wd <- '/Users/pascaltimshel/git/snpsnap/analysis/gwascatalog_production_v1'
setwd(wd)
header_str = "gwas;rating_insufficient;pct_insufficient;N_insufficient;N_input_snps;rating_size;pct_size;median_size;N_sample_sets"
header_cols = unlist(strsplit(header_str, split=';')) #head_cols = unlist(str_split(header_str, perl(';')))
## Read into a list of files:
path.datafiles <- wd
pat = "subprocess_gwastable.*\\.tab$"
files <- list.files(path = path.datafiles, pattern = pat, full.names = TRUE) #full path
params <- str_match(files, 'subprocess_gwastable.(.*).tab')[,2] # perl does not work
names(files) <- params
cat(names(files), sep="\n")
wd <- '/Users/pascaltimshel/git/snpsnap/analysis/gwascatalog_production_v1'
setwd(wd)
header_str = "gwas;rating_insufficient;pct_insufficient;N_insufficient;N_input_snps;rating_size;pct_size;median_size;N_sample_sets"
header_cols = unlist(strsplit(header_str, split=';')) #head_cols = unlist(str_split(header_str, perl(';')))
## Read into a list of files:
path.datafiles <- wd
pat = "subprocess_gwastable.*\\.tab$"
files <- list.files(path = path.datafiles, pattern = pat, full.names = TRUE) #full path
params <- str_match(files, 'subprocess_gwastable.(.*).tab')[,2] # perl does not work
names(files) <- params
cat(names(files), sep="\n")
library(ggplot2)
library(reshape2)
library(plyr)
library(stringr)
wd <- '/Users/pascaltimshel/git/snpsnap/analysis/gwascatalog_production_v1'
setwd(wd)
header_str = "gwas;rating_insufficient;pct_insufficient;N_insufficient;N_input_snps;rating_size;pct_size;median_size;N_sample_sets"
header_cols = unlist(strsplit(header_str, split=';')) #head_cols = unlist(str_split(header_str, perl(';')))
## Read into a list of files:
path.datafiles <- wd
pat = "subprocess_gwastable.*\\.tab$"
files <- list.files(path = path.datafiles, pattern = pat, full.names = TRUE) #full path
params <- str_match(files, 'subprocess_gwastable.(.*).tab')[,2] # perl does not work
names(files) <- params
cat(names(files), sep="\n")
library(ggplot2)
library(reshape2)
library(plyr)
library(stringr)
wd <- '/Users/pascaltimshel/git/snpsnap/analysis/gwascatalog_production_v1'
setwd(wd)
header_str = "gwas;rating_insufficient;pct_insufficient;N_insufficient;N_input_snps;rating_size;pct_size;median_size;N_sample_sets"
header_cols = unlist(strsplit(header_str, split=';')) #head_cols = unlist(str_split(header_str, perl(';')))
## Read into a list of files:
path.datafiles <- wd
pat = "subprocess_gwastable.*\\.tab$"
files <- list.files(path = path.datafiles, pattern = pat, full.names = TRUE) #full path
params <- str_match(files, 'subprocess_gwastable.(.*).tab')[,2] # perl does not work
names(files) <- params
cat(names(files), sep="\n")
list_of_data <- llply(files, read.delim, col.names=header_cols, stringsAsFactors=FALSE)#row.names = 1 --> NO!
x <- list_of_data[['10000.5.50.50.50']]
add_col <- function(dfname, dflist){
df <- dflist[[dfname]]
df["param"] <- factor(dfname)
return (df)
}
dflist <- lapply(names(list_of_data), add_col, list_of_data) #adding column
names(dflist) <- names(list_of_data) #copy names
#x <- dflist[[1]]
df <- ldply(dflist) # merging
tmp <- df[df[,'gwas']=='Age-related_macular_degeneration',]
tmp1 <- df[df[,'gwas']=='Alzheimers_disease',]
############### MAKING DATA FRAMEs
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient'))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_size'))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient','pct_size'))
################### BOX PLOT
#str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=variable)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
######################## TEXT PLOT for specific data frame
dfwork <- dflist[['10000.5.50.50.50']]
p <- ggplot(dfwork, aes(x=1, y=pct_insufficient, label=rating_insufficient)) + geom_text()# + geom_jitter()
p
############## Quantiles ######################
get_quantiles <- function(df) {
#param <- as.character(df[1,'param']) # OBS: not nice code
#cat(param)
q1 <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
q2 <- quantile(df[,'pct_size'], c(.20, .40, .60, .80, 1))
#df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param)) # orig NOT NEEDED, created automatically
df2return <- data.frame(q_insuf=q1, q_size=q2, quantile_id=names(q1)) #OBS: q1 and q1 must have same props vector
return (df2return)
}
df.quantile <- ldply(dflist, get_quantiles) # making df containing quantiles
### FORMATTER FUNCTION
fmt1 <- function(x){
format(x,digits=2,nsmall=2,scientific = FALSE)
}
fmt2 <- function(x){
#round(x, digits = 1) # rounds to 'digits' DECIMAL PLACES | may get numbers like 41.7 and 31 in the same formatting
#signif(x, digits = 3) # rounds to 'digits' SIGNIFICANT DIGITS | may get numbers like 41.7 and 31 in the same formatting
format( round(x, digits = 2), nsmall=2 )
}
#### INSUFFICIENT PLOT
p <- ggplot(df.quantile, aes(x=.id, y=q_insuf, color=.id, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25) # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(q_insuf)),hjust=1.25, vjust=0.5)
p <- p + labs(title="Insufficient quantiles", x='param', y='%')
p
#### MATCH SIZE PLOT
p <- ggplot(df.quantile, aes(x=.id, y=q_size, color=.id, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25) # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(q_size)),hjust=1.25, vjust=0.5)
p <- p + labs(title="Match size", x='param', y='%')
p
p <- ggplot(df.quantile, aes(x=.id, y=q_size, color=.id, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25) # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(q_size)),hjust=1.25, vjust=0.5, colour='black')
p <- p + labs(title="Match size", x='param', y='%')
p
p <- p + geom_text(hjust=-0.25, colour='black') # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(q_size)),hjust=1.25, vjust=0.5, colour='black')
p <- p + labs(title="Match size", x='param', y='%')
p
View(df.quantile)
p <- ggplot(df.quantile, aes(x=.id, y=q_insuf, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25) # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(q_insuf)),hjust=1.25, vjust=0.5)
p <- p + labs(title="Insufficient quantiles", x='param', y='%')
p
#### MATCH SIZE PLOT
p <- ggplot(df.quantile, aes(x=.id, y=q_size, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25, colour='black') # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(q_size)),hjust=1.25, vjust=0.5, colour='black')
p <- p + labs(title="Match size", x='param', y='%')
p
View(df.quantile)
df.quantile.melt <- melt(df.quantile, id.vars=c('q_insuf','q_size'))
View(df.quantile.melt)
View(df.quantile.melt)
df.quantile.melt <- melt(df.quantile, id.vars=c('quantile_id') measure.vars=c('q_insuf','q_size'))
View(df.quantile)
df.quantile.melt <- melt(df.quantile, id.vars=c('quantile_id'), measure.vars=c('q_insuf','q_size'))
View(df.quantile.melt)
p <- ggplot(df.quantile.melt, aes(x=variable, y=value, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25) # hjust - (default: 0.5)
p
View(df)
p <- ggplot(df.quantile.melt, aes(x=variable, y=value, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25) # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(value)),hjust=1.25, vjust=0.5)
p <- p + labs(title="Scoring of 64 GWAS catalog SNPs lists", x='Score Measure', y='%')
p
df.quantile.melt <- melt(df.quantile, id.vars=c('quantile_id'), measure.vars=c('q_insuf','q_size'))
p <- ggplot(df.quantile.melt, aes(x=variable, y=value, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25) # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(value)),hjust=1.25, vjust=0.5)
p <- p + labs(title="Scoring of 63 GWAS catalog SNPs lists", x='Score Measure', y='%')
p
p <- ggplot(df.quantile, aes(x=.id, y=q_insuf, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25) # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(q_insuf)),hjust=1.25, vjust=0.5)
p <- p + labs(title="Insufficient quantiles", x='param', y='%')
p
#### MATCH SIZE PLOT
plots <- list()  # new empty list
#### INSUFFICIENT PLOT
p <- ggplot(df.quantile, aes(x=.id, y=q_insuf, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25) # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(q_insuf)),hjust=1.25, vjust=0.5)
p <- p + labs(title="Insufficient quantiles", x='param', y='%')
p
plots[["q_insuf"]] <- p
#### MATCH SIZE PLOT
p <- ggplot(df.quantile, aes(x=.id, y=q_size, label=quantile_id)) + geom_point()
p <- p + geom_text(hjust=-0.25) # hjust - (default: 0.5)
p <- p + geom_text(aes(label=fmt2(q_size)),hjust=1.25, vjust=0.5)
p <- p + labs(title="Match size", x='param', y='%')
p
plots[["q_size"]] <- p
## Make multiplot
multiplot(plotlist = plots, cols=1)
multiplot(plotlist = plots, cols=2)
wd <- '/Users/pascaltimshel/git/snpsnap/analysis/gwascatalog_production_v1'
setwd(wd)
