strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "595 794 7569",
"387 287 6718", "apple", "233.398.9187 ", "482 952 3315",
"239 923 8115", "842 566 4692", "Work: 579-499-7527", "$1000",
"Home: 543.355.3679")
phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
str_extract(strings, phone)
str_match(strings, phone)
strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "595 794 7569",
"387 287 6718", "apple", "233.398.9187 ", "482 952 3315",
"239 923 8115", "842 566 4692", "Work: 579-499-7527", "$1000",
"Home: 543.355.3679")
strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "595 794 7569",
"387 287 6718", "apple", "233.398.9187 ", "482 952 3315",
"239 923 8115", "842 566 4692", "Work: 579-499-7527", "$1000",
"Home: 543.355.3679")
strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "595 794 7569",
"387 287 6718", "apple", "233.398.9187 ", "482 952 3315",
"239 923 8115", "842 566 4692", "Work: 579-499-7527", "$1000",
"Home: 543.355.3679")
strings <- c(" 219 733 8965", "329-293-8753 ", "banana", "595 794 7569",
"387 287 6718", "apple", "233.398.9187 ", "482 952 3315",
"239 923 8115", "842 566 4692", "Work: 579-499-7527", "$1000",
"Home: 543.355.3679")
phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
str_extract(strings, phone)
str_match(strings, phone)
str_match_all(strings, phone)
strings <- c("Home: 219 733 8965. Work: 229-293-8753 ",
"banana pear apple", "595 794 7569 / 387 287 6718")
phone <- "([2-9][0-9]{2})[- .]([0-9]{3})[- .]([0-9]{4})"
str_extract_all(strings, phone)
str_match_all(strings, phone)
str_match(strings, phone)
str_match_all(strings, phone)
params <- str_match(files, perl('subprocess_gwastable.(.*).tab'), perl=T)
params <- str_match(files, perl('subprocess_gwastable.(.*).tab'), perl=TRUE)
params <- str_match(files, 'subprocess_gwastable.(.*).tab', perl=T)
params <- str_match(files, 'subprocess_gwastable.(.*).tab') # perl does not work
params
params <- str_match(files, 'subprocess_gwastable.(.*).tab')[:,2] # perl does not work
params <- str_match(files, 'subprocess_gwastable.(.*).tab')[,2] # perl does not work
params
names(files) <- params
cat(names(files), sep="\n")
list_of_data <- llply(files, read.delim, col.names=header_cols, stringsAsFactors=FALSE)#row.names = 1 --> NO!
x <- list_of_data[[1]]
?ldply
list_of_data[1]
names(list_of_data[1])
names(list_of_data[[1]])
collect <- function(df){
cat(name(x))
#df["param"] = names
}
collection <- ldply(list_of_data, collect)
collect <- function(df){
cat(names(x))
#df["param"] = names
}
collection <- ldply(list_of_data, collect)
add_col <- function(dfname, dflist){
df <- dflist[[dfname]]
df["param"] <- factor(dfname)
return (df)
}
df <- lapply(names(list_of_data), add_col, list_of_data)
dflist <- lapply(names(list_of_data), add_col, list_of_data)
x <- dflist[[1]]
View(x)
df <- ldply(dflist)
View(df)
?melt
View(df)
dfmelt <- melt(df, id.vars=c('gwas'), measure.vars=c('pct_few_matches', 'pct_over_sampling'))
View(dfmelt)
dfmelt <- melt(df, id.vars=c('gwas'), measure.vars=c('param', 'pct_few_matches', 'pct_over_sampling'))
View(dfmelt)
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_few_matches', 'pct_over_sampling'))
View(df)
View(dfmelt)
?ggplot
str(dfmelt)
p1 <- ggplot(dfmelt, aes(x=param, y=value))
p1
p1 <- ggplot(dfmelt, aes(x=param, y=value)) + geom_boxplot()
p1
p <- ggplot(dfmelt, aes(x=param, y=value)) + geom_boxplot()
p <- p + geom_jitter()
p
p <- ggplot(dfmelt, aes(x=param, y=value)) + geom_boxplot()
p <- p + geom_jitter() + coord_flip()
p
x <- list_of_data[[1]]
View(x)
cat(names(files), sep="\n")
View(x)
x <- list_of_data[[6]]
View(x)
p <- ggplot(dfmelt, aes(x=param, y=value)) + geom_boxplot()
#p <- p + geom_jitter() + coord_flip()
p
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
#p <- p + geom_jitter() + coord_flip()
p
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_over_sampling'))
str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
#p <- p + geom_jitter() + coord_flip()
p
df[,gwas=='Age-related_macular_degeneration']
df[,'gwas']=='Age-related_macular_degeneration'
df[df[,'gwas']=='Age-related_macular_degeneration',]
tmp <- df[df[,'gwas']=='Age-related_macular_degeneration',]
View(tmp)
tmp1 <- df[df[,'gwas']=='Alzheimers_disease',]
View(tmp1)
rm(list=ls())
library(ggplot2)
library(reshape2)
library(plyr)
library(stringr)
wd <- '/Users/pascaltimshel/git/snpsnap/analysis/gwascatalog'
setwd(wd)
header_str = "gwas;rating_few_matches;pct_few_matches;N_few_matches;N_input_snps;rating_over_sampling;pct_over_sampling;median_sample_size;N_sample_sets"
header_cols = unlist(strsplit(header_str, split=';')) #head_cols = unlist(str_split(header_str, perl(';')))
## Read into a list of files:
path.datafiles <- wd
pat = "subprocess_gwastable.*\\.tab$"
files <- list.files(path = path.datafiles, pattern = pat, full.names = TRUE) #full path
params <- str_match(files, 'subprocess_gwastable.(.*).tab')[,2] # perl does not work
names(files) <- params
cat(names(files), sep="\n")
list_of_data <- llply(files, read.delim, col.names=header_cols, stringsAsFactors=FALSE)#row.names = 1 --> NO!
x <- list_of_data[[6]]
add_col <- function(dfname, dflist){
df <- dflist[[dfname]]
df["param"] <- factor(dfname)
return (df)
}
dflist <- lapply(names(list_of_data), add_col, list_of_data) #adding column
x <- list_of_data[[5]]
add_col <- function(dfname, dflist){
df <- dflist[[dfname]]
df["param"] <- factor(dfname)
return (df)
}
dflist <- lapply(names(list_of_data), add_col, list_of_data) #adding column
#x <- dflist[[1]]
df <- ldply(dflist) # merging
tmp <- df[df[,'gwas']=='Age-related_macular_degeneration',]
tmp1 <- df[df[,'gwas']=='Alzheimers_disease',]
#dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_few_matches', 'pct_over_sampling'))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_few_matches'))
str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
#p <- p + geom_jitter() + coord_flip()
p
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
p <- p + geom_jitter() + coord_flip()
p
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_over_sampling'))
str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_over_sampling'))
str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
rm(list=ls())
library(ggplot2)
library(reshape2)
library(plyr)
library(stringr)
wd <- '/Users/pascaltimshel/git/snpsnap/analysis/gwascatalog'
setwd(wd)
header_str = "gwas;rating_insufficient;pct_insufficient;N_insufficient;N_input_snps;rating_size;pct_size;median_size;N_sample_sets"
header_cols = unlist(strsplit(header_str, split=';')) #head_cols = unlist(str_split(header_str, perl(';')))
## Read into a list of files:
path.datafiles <- wd
pat = "subprocess_gwastable.*\\.tab$"
files <- list.files(path = path.datafiles, pattern = pat, full.names = TRUE) #full path
params <- str_match(files, 'subprocess_gwastable.(.*).tab')[,2] # perl does not work
names(files) <- params
cat(names(files), sep="\n")
list_of_data <- llply(files, read.delim, col.names=header_cols, stringsAsFactors=FALSE)#row.names = 1 --> NO!
x <- list_of_data[[5]]
add_col <- function(dfname, dflist){
df <- dflist[[dfname]]
df["param"] <- factor(dfname)
return (df)
}
dflist <- lapply(names(list_of_data), add_col, list_of_data) #adding column
#x <- dflist[[1]]
df <- ldply(dflist) # merging
tmp <- df[df[,'gwas']=='Age-related_macular_degeneration',]
tmp1 <- df[df[,'gwas']=='Alzheimers_disease',]
#dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_few_matches', 'pct_over_sampling'))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient'))
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient'))
str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
?melt
View(dfmelt)
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient'), value.name=c('pct_insufficient'))
str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient'), value.name=c('pct_insufficient'))
str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=param)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient'))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_size'))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient','pct_size'))
p <- ggplot(dfmelt, aes(x=param, y=value, fill=variable)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
View(x)
View(x)
View(df)
cat(names(files), sep="\n")
x <- list_of_data[['1000.2.5.5']]
View(x)
df_work <- list_of_data[['1000.2.5.5']]
names(dflist)
names(dflist) <- names(list_of_data) #copy names
names(dflist)
df_work <- dflist[['1000.2.5.5']]
View(df_work)
p <- ggplot(dfwork, aes(x=pct_insufficient)) + geom_text(aes(label=rating_insufficient))
df_work <- dflist[['1000.2.5.5']]
dfwork <- dflist[['1000.2.5.5']]
p <- ggplot(dfwork, aes(x=pct_insufficient)) + geom_text(aes(label=rating_insufficient))
p
p <- ggplot(dfwork, aes(x=pct_insufficient, label=rating_insufficient)) + geom_text()
p
p <- ggplot(dfwork, aes(x=1, y=pct_insufficient, label=rating_insufficient)) + geom_text()
p
p <- ggplot(dfwork, aes(x=1, y=pct_insufficient, label=rating_insufficient)) + geom_text() + geom_jitter()
p
p <- ggplot(dfwork, aes(x=1, y=pct_insufficient, label=rating_insufficient)) + geom_text()# + geom_jitter()
p
dfwork <- dflist[['1000.5.20.20']]
p <- ggplot(dfwork, aes(x=1, y=pct_insufficient, label=rating_insufficient)) + geom_text()# + geom_jitter()
p
quantile(dfwork['pct_insufficient'], c(.20, .40, .60, .80))
quantile(dfwork[,'pct_insufficient'], c(.20, .40, .60, .80))
quantile(dfwork[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient','pct_size'))
#str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=variable)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
p <- ggplot(dfmelt, aes(x=param, y=value, fill=variable)) + geom_jitter()
p
p <- ggplot(dfmelt, aes(x=param, y=value, fill=variable)) + geom_jitter()
p <- p + stat_quantile(quantiles = 0.5) #+ coord_flip()
p
install.packes('quantreg')
install.packages('quantreg')
p <- ggplot(dfmelt, aes(x=param, y=value, fill=variable)) + geom_jitter()
p <- p + stat_quantile(quantiles = 0.5) #+ coord_flip()
p
p <- ggplot(dfmelt, aes(x=param, y=value, fill=variable)) + geom_jitter()
p
View(df_work)
?data,frame
?data.frame
quantile(dfwork[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
?quantile
q <- quantile(dfwork[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
class(q)
names(q)
test <- data.frame(quantile=q)
View(test)
test <- data.frame(quantile_val=q, quantile_id=names(q))
View(test)
?factor
factor('ba')
test <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor('someval'))
View(test)
str(test)
test <- data.frame(quantile_val=q, quantile_id=names(q), orig='someval')
str(test)
names(dfwork)
col.names(dfwork)
colnames(dfwork)
get_quantiles <- function(df) {
param <- df[0,'param'] # OBS: not nice code
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param))
return df2return
}
get_quantiles <- function(df) {
param <- df[0,'param'] # OBS: not nice code
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param))
return df2return
df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param))
############## Quantiles
get_quantiles <- function(df) {
param <- df[0,'param'] # OBS: not nice code
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param))
return (df2return)
}
ldply(dflist,gen_quantiles)
get_quantiles <- function(df) {
param <- df[0,'param'] # OBS: not nice code
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param))
return (df2return)
}
ldply(dflist, gen_quantiles)
ldply(dflist, get_quantiles)
get_quantiles <- function(df) {
param <- df[0,'param'] # OBS: not nice code
cat(param)
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param))
return (df2return)
}
ldply(dflist, get_quantiles)
get_quantiles <- function(df) {
param <- df[0,'param'] # OBS: not nice code
cat(param)
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
#df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param))
#return (df2return)
}
ldply(dflist, get_quantiles)
q <- quantile(dfwork[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
?ldply
get_quantiles <- function(df) {
param <- df[1,'param'] # OBS: not nice code
cat(param)
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
#df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param))
#return (df2return)
}
ldply(dflist, get_quantiles)
get_quantiles <- function(df) {
param <- as.character(df[1,'param']) # OBS: not nice code
cat(param)
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
#df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param))
#return (df2return)
}
ldply(dflist, get_quantiles)
get_quantiles <- function(df) {
param <- as.character(df[1,'param']) # OBS: not nice code
#cat(param)
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param))
return (df2return)
}
ldply(dflist, get_quantiles)
get_quantiles <- function(df) {
#param <- as.character(df[1,'param']) # OBS: not nice code
#cat(param)
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
#df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param)) # orig NOT NEEDED, created automatically
df2return <- data.frame(quantile_val=q, quantile_id=names(q)
return (df2return)
}
ldply(dflist, get_quantiles)
get_quantiles <- function(df) {
#param <- as.character(df[1,'param']) # OBS: not nice code
#cat(param)
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
#df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param)) # orig NOT NEEDED, created automatically
df2return <- data.frame(quantile_val=q, quantile_id=names(q)
return (df2return)
}
############## Quantiles
get_quantiles <- function(df) {
#param <- as.character(df[1,'param']) # OBS: not nice code
#cat(param)
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
#df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param)) # orig NOT NEEDED, created automatically
df2return <- data.frame(quantile_val=q, quantile_id=names(q)
return (df2return)
}
ldply(dflist, get_quantiles)
###### Quantiles
get_quantiles <- function(df) {
#param <- as.character(df[1,'param']) # OBS: not nice code
#cat(param)
q <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
#df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param)) # orig NOT NEEDED, created automatically
df2return <- data.frame(quantile_val=q, quantile_id=names(q))
return (df2return)
}
ldply(dflist, get_quantiles)
df.quantile <- ldply(dflist, get_quantiles)
View(df.quantile)
p <- ggplot(df.quantile, aes(x=param, y=quantile_val, color=param)) + geom_jitter()
p
p <- ggplot(df.quantile, aes(x=.id, y=quantile_val, color=.id)) + geom_jitter()
p
p <- ggplot(df.quantile, aes(x=.id, y=quantile_val, color=.id)) + geom_point()
p
p <- ggplot(df.quantile, aes(x=.id, y=quantile_val, color=.id, label=quantile_id)) + geom_point()
p
p <- ggplot(df.quantile, aes(x=.id, y=quantile_val, color=.id, label=quantile_id)) + geom_point() + geom_text()
p
p <- ggplot(df.quantile, aes(x=.id, y=quantile_val, color=.id, label=quantile_id)) + geom_point() + geom_text()
p <- p + labs(title="Plant growth", xlab='param')
p
View(x)
?quantile
get_quantiles <- function(df) {
#param <- as.character(df[1,'param']) # OBS: not nice code
#cat(param)
q1 <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
q2 <- quantile(df[,'pct_size'], c(.20, .40, .60, .80, 1))
#df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param)) # orig NOT NEEDED, created automatically
df2return <- data.frame(q_insuf=q1, q_size=q2, quantile_id=names(q1)) #OBS: q1 and q1 must have same props vector
return (df2return)
}
df.quantile <- ldply(dflist, get_quantiles)
View(df.quantile)
p <- ggplot(df.quantile, aes(x=.id, y=q_insuf, color=.id, label=quantile_id)) + geom_point() + geom_text()
p <- p + labs(title="Insufficient", xlab='param')
p
p <- ggplot(df.quantile, aes(x=.id, y=q_insuf, color=.id, label=quantile_id)) + geom_point() + geom_text()
p <- p + labs(title="Insufficient quantiles", xlab='param')
p
p <- ggplot(df.quantile, aes(x=.id, y=q_size, color=.id, label=quantile_id)) + geom_point() + geom_text()
p <- p + labs(title="Size quantiles", xlab='param')
p
rm(list=ls())
library(ggplot2)
library(reshape2)
library(plyr)
library(stringr)
wd <- '/Users/pascaltimshel/git/snpsnap/analysis/gwascatalog_expanded'
setwd(wd)
header_str = "gwas;rating_insufficient;pct_insufficient;N_insufficient;N_input_snps;rating_size;pct_size;median_size;N_sample_sets"
header_cols = unlist(strsplit(header_str, split=';')) #head_cols = unlist(str_split(header_str, perl(';')))
## Read into a list of files:
path.datafiles <- wd
pat = "subprocess_gwastable.*\\.tab$"
files <- list.files(path = path.datafiles, pattern = pat, full.names = TRUE) #full path
params <- str_match(files, 'subprocess_gwastable.(.*).tab')[,2] # perl does not work
names(files) <- params
cat(names(files), sep="\n")
list_of_data <- llply(files, read.delim, col.names=header_cols, stringsAsFactors=FALSE)#row.names = 1 --> NO!
x <- list_of_data[['1000.2.5.5']]
View(x)
add_col <- function(dfname, dflist){
df <- dflist[[dfname]]
df["param"] <- factor(dfname)
return (df)
}
dflist <- lapply(names(list_of_data), add_col, list_of_data) #adding column
names(dflist) <- names(list_of_data) #copy names
#x <- dflist[[1]]
df <- ldply(dflist) # merging
tmp <- df[df[,'gwas']=='Age-related_macular_degeneration',]
tmp1 <- df[df[,'gwas']=='Alzheimers_disease',]
############### MAKING DATA FRAMEs
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient'))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_size'))
dfmelt <- melt(df, id.vars=c('param','gwas'), measure.vars=c('pct_insufficient','pct_size'))
################### BOX PLOT
#str(dfmelt)
p <- ggplot(dfmelt, aes(x=param, y=value, fill=variable)) + geom_boxplot()
p <- p + geom_jitter() #+ coord_flip()
p
#dfwork <- dflist[['1000.2.5.5']]
dfwork <- dflist[['1000.5.20.20']]
p <- ggplot(dfwork, aes(x=1, y=pct_insufficient, label=rating_insufficient)) + geom_text()# + geom_jitter()
p
############## Quantiles ######################
get_quantiles <- function(df) {
#param <- as.character(df[1,'param']) # OBS: not nice code
#cat(param)
q1 <- quantile(df[,'pct_insufficient'], c(.20, .40, .60, .80, 1))
q2 <- quantile(df[,'pct_size'], c(.20, .40, .60, .80, 1))
#df2return <- data.frame(quantile_val=q, quantile_id=names(q), orig=factor(param)) # orig NOT NEEDED, created automatically
df2return <- data.frame(q_insuf=q1, q_size=q2, quantile_id=names(q1)) #OBS: q1 and q1 must have same props vector
return (df2return)
}
df.quantile <- ldply(dflist, get_quantiles) # making df containing quantiles
# OBS: switch y=[q_size; q_insuf]
p <- ggplot(df.quantile, aes(x=.id, y=q_size, color=.id, label=quantile_id)) + geom_point() + geom_text()
p <- p + labs(title="Size quantiles", xlab='param')
p
df.quantile <- ldply(dflist, get_quantiles) # making df containing quantiles
# OBS: switch y=[q_size; q_insuf]
p <- ggplot(df.quantile, aes(x=.id, y=q_size, color=.id, label=quantile_id)) + geom_point() + geom_text()
p <- p + labs(title="Size quantiles", xlab='param')
p
p <- ggplot(df.quantile, aes(x=.id, y=q_insuf, color=.id, label=quantile_id)) + geom_point() + geom_text()
p <- p + labs(title="Size quantiles", xlab='param')
p
p <- ggplot(df.quantile, aes(x=.id, y=q_insuf, color=.id, label=quantile_id)) + geom_point() + geom_text()
p <- p + labs(title="Insufficient quantiles", xlab='param')
p
